# -*- coding: utf-8 -*-
"""
/***************************************************************************
 APISDialog
                                 A QGIS plugin
 APIS - Archaeological Prospection Information System - A QGIS Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Johannes Liem (digitalcartography.org) and Aerial Archive of the University of Vienna
        email                : johannes.liem@digitalcartography.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import json

from PyQt5.QtCore import QSettings, QDir, QFile, QFileInfo
from PyQt5.QtWidgets import QDialog, QMessageBox, QTreeWidgetItem
from PyQt5.uic import loadUiType

from APIS.src.apis_utils import (SetWindowSizeAndPos, GetWindowSize, GetWindowPos)

from collections.abc import Mapping

FORM_CLASS, _ = loadUiType(os.path.join(
    os.path.dirname(os.path.dirname(__file__)), 'ui', 'apis_chronology.ui'), resource_suffix='')


class APISChronology(QDialog, FORM_CLASS):
    def __init__(self, country, parent=None):
        """Constructor."""
        super(APISChronology, self).__init__(parent)
        self.candidateCountry = country
        self.setupUi(self)

        # Initial window size/pos last saved. Use default values for first time
        if GetWindowSize("chronology"):
            self.resize(GetWindowSize("chronology"))
        if GetWindowPos("chronology"):
            self.move(GetWindowPos("chronology"))

        self.settings = QSettings(QSettings().value("APIS/config_ini"), QSettings.IniFormat)

        self.currentChronology = None
        self.chronologiesDir = None
        self.isSetup = False
        self.uiChronologyCombo.currentIndexChanged.connect(self.updateChronology)
        self.accepted.connect(self.onAccepted)
        self.rejected.connect(self.onRejected)

        self.loadAvailableChronologies()

    def loadAvailableChronologies(self):
        self.chronologiesDir = QDir(self.settings.value("APIS/chronology_dir"))
        if self.chronologiesDir.exists():
            chronologiesJsonFiles = self.chronologiesDir.entryList(['*.json'], QDir.Files)
            if len(chronologiesJsonFiles) > 0:
                for chronology in chronologiesJsonFiles:
                    if QFile(os.path.join(self.chronologiesDir.absolutePath(), chronology)).exists():  # and is chronology json file (find some token to verify)
                        self.uiChronologyCombo.addItem(QFileInfo(chronology).completeBaseName())

                indexCandidate = self.uiChronologyCombo.findText(self.candidateCountry)
                indexDefault = self.uiChronologyCombo.findText(self.settings.value("APIS/default_chronology", "AUT"))
                # QMessageBox.information(self, "Info", "{}, {}, {}".format(self.candidateCountry, indexCandidate, indexDefault))
                if indexCandidate >= 0:
                    self.uiChronologyCombo.setCurrentIndex(indexCandidate)
                elif indexDefault >= 0:
                    self.uiChronologyCombo.setCurrentIndex(indexDefault)
                else:
                    self.uiChronologyCombo.setCurrentIndex(0)
                self.isSetup = True
            else:
                QMessageBox.warning(self, "Keine Chronologien vorhanden", "Im angegebenen Verzeichnis ({0}) sind keine Chronologien vorhanden!".format(self.chronologiesDir.absolutePath()))
        else:
            QMessageBox.warning(self, "Ordner existiert nicht", "Das angegebenen Verzeichnis ({0}) existiert nicht!".format(self.chronologiesDir.absolutePath()))

    def nested_dict_iter(self, nested):
        for key, value in nested.items():
            if isinstance(value, Mapping):
                yield from self.nested_dict_iter(value)
            else:
                yield key, value

    def new_item(self, parent, text, val=None):
        child = QTreeWidgetItem([text])
        self.fill_item(child, val)
        parent.addChild(child)
        child.setExpanded(True)

    def fill_item(self, item, value):
        if value is None:
            return
        elif isinstance(value, dict):
            for key, val in value.items():
                if key == "name":
                    self.new_item(item, val, val)
        elif isinstance(value, (list, tuple)):
            for val in value:
                text = (str(val) if not isinstance(val, (dict, list, tuple)) else f'[{type(val).__name__}]')
                self.new_item(item, text, val)
        else:
            self.new_item(item, str(value))

    def updateChronology(self):
        # QMessageBox.information(self, "Info", f"{self.sender()}")
        chronology = self.sender().currentText()
        fileName = os.path.normpath(os.path.join(self.chronologiesDir.absolutePath(), f"{chronology}.json"))
        self.uiChronologyFilePathLbl.setText(fileName)
        with open(fileName) as jsonFile:
            data = json.load(jsonFile)
            # blub = JsonJ(data)
            # QMessageBox.information(self, "Info", json.dumps(data))
            if "name" in data and data["name"] == chronology and "chronology" in data:
                self.uiChronologyTree.clear()
                self.fill_item(self.uiChronologyTree.invisibleRootItem(), data["chronology"])
                # while nested_dict_iter(data["chronology"]).next():

                # for item in data["chronology"]:
                #     continue
            else:
                QMessageBox.warning(self, "Chronologie JSON Datei fehlerhaft", f"Die Chronologie JSON Datei ({fileName}) ist fehlerhaft!")
            del data

    def onAccepted(self):
        SetWindowSizeAndPos("chronology", self.size(), self.pos())

    def onRejected(self):
        SetWindowSizeAndPos("chronology", self.size(), self.pos())
