# -*- coding: utf-8 -*-
"""
/***************************************************************************
 APISDialog
                                 A QGIS plugin
 APIS - Archaeological Prospection Information System - A QGIS Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Johannes Liem (digitalcartography.org) and Aerial Archive of the University of Vienna
        email                : johannes.liem@digitalcartography.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.uic import loadUiType
from PyQt5.QtWidgets import QDialog, QTableView, QAbstractItemView, QComboBox, QHeaderView
from PyQt5.QtCore import QDate, Qt
from PyQt5.QtSql import QSqlQueryModel
from PyQt5.QtGui import QIntValidator

from APIS.src.apis_utils import SetWindowSize, GetWindowSize

from functools import partial

FORM_CLASS, _ = loadUiType(os.path.join(
    os.path.dirname(os.path.dirname(__file__)), 'ui', 'apis_film_search.ui'), resource_suffix='')


class APISFilmSearch(QDialog, FORM_CLASS):
    def __init__(self, dbm, parent=None):
        """Constructor."""
        super(APISFilmSearch, self).__init__(parent)

        self.dbm = dbm

        self.setupUi(self)
        if GetWindowSize("film_search"):
            self.resize(GetWindowSize("film_search"))

        self.accepted.connect(self.onClose)
        self.rejected.connect(self.onClose)

        now = QDate.currentDate()
        self.uiSearchDate.setDate(now)
        self.uiSearchDate.setMaximumDate(now)
        self.uiToDate.setDate(now)
        self.uiToDate.setMaximumDate(now)

        self.wildcardEditsList = [self.uiWcP1Edit, self.uiWcP2Edit, self.uiWcY1Edit, self.uiWcY2Edit, self.uiWcY3Edit,
                                  self.uiWcY4Edit, self.uiWcM1Edit, self.uiWcM2Edit, self.uiWcN1Edit, self.uiWcN2Edit]

        e = 0
        for editor in self.wildcardEditsList:
            editor.setValidator(QIntValidator(1, 9))
            if e < len(self.wildcardEditsList) - 1:
                editor.textEdited.connect(partial(self.setFocusTo, self.wildcardEditsList[e + 1]))
            e += 1

        self.uiResetWcBtn.clicked.connect(self.resetWildcardEdits)

        # FIXME next two lines into def => update on change of one of the two Date edits
        self.uiFromDate.setMaximumDate(self.uiToDate.date())
        self.uiToDate.setMinimumDate(self.uiFromDate.date())

        # Signals
        self.uiVerticalChk.stateChanged.connect(self.onFilmModeChange)
        self.uiObliqueChk.stateChanged.connect(self.onFilmModeChange)

        # self.uiSearchDate.dateChanged.connect()

        # self.uiMilitaryNumberEdit.textChanged()
        self.setupMilitaryCombo()

        self.uiFromDate.dateChanged.connect(self.timeSpanChanged)
        self.uiToDate.dateChanged.connect(self.timeSpanChanged)
        self.uiFromChk.stateChanged.connect(self.timeSpanConstraints)
        self.uiToChk.stateChanged.connect(self.timeSpanConstraints)

    def setFocusTo(self, editor):
        editor.setFocus()
        editor.selectAll()

    def resetWildcardEdits(self):
        for editor in self.wildcardEditsList:
            editor.clear()

    def setupMilitaryCombo(self):
        model = QSqlQueryModel(self)
        model.setQuery("SELECT DISTINCT militaernummer as milnum FROM film WHERE  militaernummer IS NOT NULL UNION ALL SELECT DISTINCT militaernummer_alt as milnum FROM film WHERE militaernummer_alt IS NOT NULL ORDER BY milnum", self.dbm.db)

        tv = QTableView()
        self.uiMilitaryNumberCombo.setView(tv)

        tv.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        tv.setSelectionMode(QAbstractItemView.SingleSelection)
        tv.setSelectionBehavior(QAbstractItemView.SelectRows)
        tv.setAutoScroll(False)

        self.uiMilitaryNumberCombo.setModel(model)

        self.uiMilitaryNumberCombo.setModelColumn(0)
        self.uiMilitaryNumberCombo.setInsertPolicy(QComboBox.NoInsert)

        tv.resizeColumnsToContents()
        tv.resizeRowsToContents()
        tv.verticalHeader().setVisible(False)
        tv.horizontalHeader().setVisible(True)
        #tv.setMinimumWidth(tv.horizontalHeader().length())
        tv.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        #FIXME implement Qt5 Completor
        #self.uiMilitaryNumberCombo.setAutoCompletion(True)

    def timeSpanConstraints(self):
        # From Date isChecked => FromDate = 01.01.1900, disable FromDate; else enable FromDate
        if self.uiFromChk.isChecked():
            self.uiFromDate.setEnabled(True)
        else:
            self.uiFromDate.setDate(self.uiFromDate.minimumDate())
            self.uiFromDate.setDisabled(True)

        # ToDate isChecked => ToDate = Today, disable ToDate; else enable ToDate
        if self.uiToChk.isChecked():
            self.uiToDate.setEnabled(True)
        else:
            self.uiToDate.setDate(self.uiToDate.maximumDate())
            self.uiToDate.setDisabled(True)

    def timeSpanChanged(self):
        self.uiFromDate.setMaximumDate(self.uiToDate.date())
        self.uiToDate.setMinimumDate(self.uiFromDate.date())

    def generateSearchFilter(self):
        # Search Mode ? byFilmModeOnly, byDate, byMilitaryNumber, byTimeSpan
        if self.uiVerticalChk.checkState() == Qt.Checked or self.uiObliqueChk.checkState() == Qt.Checked:
            #filmModePart = ()
            if self.uiVerticalChk.checkState() == Qt.Checked:
                vertical = u"'senk.'"
            else:
                vertical = u""
            if self.uiObliqueChk.checkState() == Qt.Checked:
                oblique = u"'schr채g'"
            else:
                oblique = u""

            if vertical != "" and oblique != "":
                separator = u","
            else:
                separator = u""

            #searchQuery = u"select * from film where weise in ({0}{1}{2})".format(vertical, separator, oblique)
            searchQuery = u"weise in ({0}{1}{2})".format(vertical, separator, oblique)
            searchMode = u"Filmweise: {0}{1}{2}".format(vertical, separator, oblique)
        else:
            # get search mode
            if self.uiSearchModeTBox.currentIndex() == 0:
                # byDate
                date = self.uiSearchDate.date()
                if self.uiDateRBtn.isChecked():
                    pattern = "%Y-%m-%d"
                    patternMode = u"Datum"
                    searchString = date.toString("yyyy-MM-dd")
                elif self.uiYearOnlyRBtn.isChecked():
                    pattern = "%Y"
                    patternMode = u"Jahr"
                    searchString = date.toString("yyyy")
                elif self.uiYearMonthRBtn.isChecked():
                    pattern = "%Y-%m"
                    patternMode = u"Jahr und Monat"
                    searchString = date.toString("yyyy-MM")
                elif self.uiMonthOnlyRBtn.isChecked():
                    pattern = "%m"
                    patternMode = u"Monat"
                    searchString = date.toString("MM")
                searchModePart = u"(strftime('{0}', flugdatum) = '{1}')".format(pattern, searchString)
                searchModeSearchModePart = u"{0}: '{1}'".format(patternMode, searchString)
            elif self.uiSearchModeTBox.currentIndex() == 1:
                # byMilitaryNumber
                milNum = self.uiMilitaryNumberCombo.currentText()
                milNum = ''.join(i for i in milNum if i not in '/() ')
                searchString = '%' + '%'.join(milNum[i:i + 1] for i in range(0, len(milNum), 1)) + '%'
                searchModePart = u"(militaernummer like '{0}' or militaernummer_alt like '{0}')".format(searchString)
                searchModeSearchModePart = u"Milit채rnummer: '{0}'".format(milNum)
            elif self.uiSearchModeTBox.currentIndex() == 2:
                # byTimeSpan
                fromDate = self.uiFromDate.date()
                toDate = self.uiToDate.date()
                fromDate = fromDate.toString("yyyy-MM-dd")
                toDate = toDate.toString("yyyy-MM-dd")
                searchModePart = u"(strftime('%Y-%m-%d', flugdatum) between '{0}' and '{1}')".format(fromDate, toDate)
                searchModeSearchModePart = u"Zeitspanne: von '{0}' bis '{1}'".format(fromDate, toDate)
            elif self.uiSearchModeTBox.currentIndex() == 3:
                # byWildcard
                wildcardString = "".join([(editor.text() if editor.text().strip() != '' else "_") for editor in self.wildcardEditsList])
                searchModePart = u"(filmnummer like '{0}')".format(wildcardString)
                searchModeSearchModePart = u"Wildcard: '{0}'".format(wildcardString)

            #get film mode
            if self.uiVerticalChk.checkState() == Qt.PartiallyChecked and self.uiObliqueChk.checkState() == Qt.PartiallyChecked:
                filmModePart = u" and (weise in ('senk.', 'schr채g'))"
                searchModeFilmModePart = u", Filmweise: 'senkrecht', 'schr채g'"
            elif self.uiVerticalChk.checkState() == Qt.PartiallyChecked:
                filmModePart = u" and (weise = 'senk.')"
                searchModeFilmModePart = u", Filmweise: 'senkrecht'"
            elif self.uiObliqueChk.checkState() == Qt.PartiallyChecked:
                filmModePart = u" and (weise = 'schr채g')"
                searchModeFilmModePart = u", Filmweise: 'schr채g'"
            else:
                filmModePart = u""
                searchModeFilmModePart = u", Filmweise: 'senkrecht', 'schr채g'"

            # searchQuery = u"select * from film where {0}{1}".format(searchModePart, filmModePart)
            searchQuery = u"{0}{1}".format(searchModePart, filmModePart)

            searchMode = u"{0}{1}".format(searchModeSearchModePart, searchModeFilmModePart)

        return searchMode, searchQuery

    def onFilmModeChange(self):
        verticalState = self.uiVerticalChk.checkState()
        obliqueState = self.uiObliqueChk.checkState()

        if verticalState == Qt.Checked or obliqueState == Qt.Checked:
            self.uiSearchModeTBox.setEnabled(False)
            self.uiVerticalChk.setTristate(False)
            self.uiObliqueChk.setTristate(False)
            if verticalState == Qt.PartiallyChecked:
                self.uiVerticalChk.setCheckState(Qt.Checked)
            if obliqueState == Qt.PartiallyChecked:
                self.uiObliqueChk.setCheckState(Qt.Checked)
        else:
            self.uiSearchModeTBox.setEnabled(True)
            self.uiVerticalChk.setTristate(True)
            self.uiObliqueChk.setTristate(True)

    def onClose(self):
        SetWindowSize("film_search", self.size())
