# -*- coding: utf-8 -*-
"""
/***************************************************************************
 APISDialog
                                 A QGIS plugin
 APIS - Archaeological Prospection Information System - A QGIS Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Johannes Liem (digitalcartography.org) and Aerial Archive of the University of Vienna
        email                : johannes.liem@digitalcartography.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.uic import loadUiType
from PyQt5.QtWidgets import QDialog, QGraphicsScene, QFileDialog, QTableView, QAbstractItemView, QComboBox, QHeaderView, QGraphicsTextItem
from PyQt5.QtCore import QSettings, Qt, QRectF
from PyQt5.QtSql import QSqlQueryModel
from PyQt5.QtGui import QImage, QPixmap

from APIS.src.apis_utils import IsFilm

FORM_CLASS, _ = loadUiType(os.path.join(
    os.path.dirname(os.path.dirname(__file__)), 'ui', 'apis_representative_image.ui'), resource_suffix='')


class APISRepresentativeImage(QDialog, FORM_CLASS):
    def __init__(self, dbm, imageRegistry, currentPath, filmNumber, parent=None):
        """Constructor."""
        super(APISRepresentativeImage, self).__init__(parent)

        self.dbm = dbm
        self.imageRegistry = imageRegistry
        self.currentPath = currentPath
        self.filmNumber = filmNumber
        self.newPath = currentPath

        self.setupUi(self)

        self.settings = QSettings(QSettings().value("APIS/config_ini"), QSettings.IniFormat)

        # Signals/Slot Connections
        self.rejected.connect(self.onReject)
        self.buttonBox.rejected.connect(self.onReject)
        self.buttonBox.accepted.connect(self.onAccept)
        self.uiSelectImageFromSystem.clicked.connect(self.selectImageFromSystem)

        self.graphicLoaded = False

        self.scene = QGraphicsScene()
        self.uiRepresentativeImageView.setScene(self.scene)


        # ist FilmProjekt ein FILM?
        if IsFilm(self.dbm.db, self.filmNumber):
            self.populateFilmCombo(self.filmNumber)
        else:
            self.populateFilmCombo()
        # wenn nein self.populateFilmCombo()

        self.uiAvailableImagesCombo.currentIndexChanged.connect(self.loadNewImageByFilm)

    def populateFilmCombo(self, filmNumber=None):
        editor = self.uiFilmNumberCombo
        model = QSqlQueryModel(self)
        model.setQuery("SELECT DISTINCT {0} FROM {1} ORDER BY {2}".format('filmnummer', 'film', 'filmnummer'), self.dbm.db)

        tv = QTableView()
        editor.setView(tv)

        tv.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        tv.setSelectionMode(QAbstractItemView.SingleSelection)
        tv.setSelectionBehavior(QAbstractItemView.SelectRows)
        tv.setAutoScroll(False)

        editor.setModel(model)

        editor.setModelColumn(0)
        editor.setInsertPolicy(QComboBox.NoInsert)

        tv.resizeColumnsToContents()
        tv.resizeRowsToContents()
        tv.verticalHeader().setVisible(False)
        tv.horizontalHeader().setVisible(True)
        # tv.setMinimumWidth(tv.horizontalHeader().length())
        tv.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        #FIXME PyQt5 AutoCompletion
        #editor.setAutoCompletion(True)

        if filmNumber:
            editor.setCurrentIndex(editor.findText(filmNumber))
            self.populateAvailableImagesCombo()
        else:
            editor.setCurrentIndex(-1)

        editor.currentIndexChanged.connect(self.populateAvailableImagesCombo)

    def populateAvailableImagesCombo(self, idx=None):
        self.filmNumber = self.uiFilmNumberCombo.currentText()
        # query image registry
        #TODO RM availableImages = self.imageRegistry.getImageRegistryForFilm(IdToIdLegacy(self.filmNumber))
        availableImages = self.imageRegistry.getImageRegistryForFilm(self.filmNumber)
        self.uiAvailableImagesCombo.clear()
        self.uiAvailableImagesCombo.addItems(availableImages)
        self.uiAvailableImagesCombo.setCurrentIndex(-1)


    def showEvent(self, event):
        if self.currentPath:
            self.uiImagePathLbl.setText(self.currentPath)
            self.loadImage(self.currentPath)
        else:
            self.uiImagePathLbl.setText("--")
            self.loadText()

        self.graphicLoaded = True

    def loadText(self):
        self.scene.clear()
        noImageTxt = QGraphicsTextItem()
        noImageTxt.setPlainText(u"W채hlen Sie ein repr채sentatives Luftbild aus ...")
        self.rect = noImageTxt.boundingRect()
        self.scene.addItem(noImageTxt)
        self.scene.setSceneRect(self.rect)
        self.uiRepresentativeImageView.fitInView(self.rect, Qt.KeepAspectRatio)

    def loadImage(self, path):
        self.scene.clear()
        image = QImage(path)
        size = image.size()
        self.rect = QRectF(0, 0, size.width(), size.height())
        self.scene.addPixmap(QPixmap.fromImage(image))
        self.scene.setSceneRect(self.rect)
        self.uiRepresentativeImageView.fitInView(self.rect, Qt.KeepAspectRatio)

    def loadNewImageByFilm(self):
        # generatePath
        imgDir = self.settings.value("APIS/image_dir")
        #TODO RM filmDir = IdToIdLegacy(self.filmNumber)
        filmDir = self.filmNumber
        self.newPath = os.path.normpath(imgDir +  "\\" + filmDir + "\\" + self.uiAvailableImagesCombo.currentText().replace('.','_') + ".jpg")
        self.uiImagePathLbl.setText(self.newPath)
        self.loadImage(self.newPath)

    def resizeEvent(self, event):
        if self.graphicLoaded:
            self.uiRepresentativeImageView.fitInView(self.rect, Qt.KeepAspectRatio)

    def selectImageFromSystem(self):
        dir = self.settings.value("APIS/image_dir")
        fileName, _filter = QFileDialog.getOpenFileName(self, u"Repr채sentatives Luftbild ausw채hlen", dir, "Bild Dateien (*.jpg)")
        if fileName:
            self.uiFilmNumberCombo.setCurrentIndex(-1)
            self.newPath = fileName
            self.uiImagePathLbl.setText(self.newPath)
            self.loadImage(self.newPath)

    def onAccept(self):
        '''
        Check DB
        Save options when pressing OK button
        Update Plugin Status
        '''

        self.accept()

    def onReject(self):
        '''
        Run some actions when
        the user closes the dialog
        '''
        self.close()