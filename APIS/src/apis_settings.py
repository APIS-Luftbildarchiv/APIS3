# -*- coding: utf-8 -*-
"""
/***************************************************************************
 APISDialog
                                 A QGIS plugin
 APIS - Archaeological Prospection Information System - A QGIS Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Johannes Liem (digitalcartography.org) and Aerial Archive of the University of Vienna
        email                : johannes.liem@digitalcartography.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os.path, sys
from functools import partial

from PyQt5.uic import loadUiType
from PyQt5.QtCore import QSettings
from PyQt5.QtWidgets import QDialog, QDialogButtonBox, QFileDialog

sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'ui'))
FORM_CLASS, _ = loadUiType(os.path.join(
    os.path.dirname(os.path.dirname(__file__)), 'ui', 'apis_settings.ui'), resource_suffix='')


class APISSettings(QDialog, FORM_CLASS):
    def __init__(self, iface, imageRegistry, parent=None):
        """Constructor."""
        super(APISSettings, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.iface = iface
        self.imageRegistry = imageRegistry
        self.setupUi(self)

        s = QSettings()

        # Signals/Slot Connections
        self.rejected.connect(self.onReject)
        self.buttonBox.rejected.connect(self.onReject)
        self.buttonBox.accepted.connect(self.onAccept)

        self.buttonBox.button(QDialogButtonBox.Reset).clicked.connect(self.onReset)

        self.uiUpdateImageRegistryBtn.clicked.connect(self.updateImageRegistry)

        # Selectors for getFileOpenDialogs
        # paths chosen by user
        self.fileSelectors = {
            # "uiDatabaseFile" : {
            #     "button" : self.uiDatabaseFileTBtn,
            #     "infotext" : self.tr(u"Wählen Sie eine APIS Spatialite Datenbank aus ..."),
            #     "input" : self.uiDatabaseFileEdit,
            #     "path" : s.value("APIS/database_file", ""),
            #     "filter" : None
            # },
            "uiConfigIniFile" : {
                "button" : self.uiConfigIniFileTBtn,
                "infotext" : self.tr(u"Wählen Sie eine APIS INI Datei aus ..."),
                "input" : self.uiConfigIniFileEdit,
                "path" : s.value("APIS/config_ini", ""),
                "filter" : self.tr("Config INI (*.ini)")
            }
        }
        for key, item in self.fileSelectors.items():
            input = item['input']
            input.setText(str(item['path']))
            control = item['button']
            slot = partial(self.callOpenFileDialog, key)
            control.clicked.connect(slot)

    def setImageRegistry(self, imageRegistry):
        self.imageRegistry = imageRegistry

    def updateImageRegistry(self):
        self.imageRegistry.updateRegistries()

    def callOpenFileDialog(self, key):
        """
        Ask the user to select a file
        and write down the path to appropriate field
        """
        inPath = QFileDialog.getOpenFileName(
            None,
            caption=self.fileSelectors[key]['infotext'],
            directory=str(self.fileSelectors[key]['input'].text()),#.encode('utf-8')).strip(' \t'),
            filter=self.fileSelectors[key]['filter']
        )

        if os.path.exists(str(inPath[0])):
            self.fileSelectors[key]['input'].setText(str(inPath[0])) #str(inPath))

    def onAccept(self):
        '''
        Check DB
        Save options when pressing OK button
        Update Plugin Status
        '''

        # Save Settings
        s = QSettings()
        if len(self.uiConfigIniFileEdit.text()) > 0:
            s.setValue("APIS/config_ini", self.uiConfigIniFileEdit.text())

        self.accept()

    def onReject(self):
        '''
        Run some actions when
        the user closes the dialog
        '''
        self.close()

    def onReset(self):
        '''
        Delte Settings
        '''
        s = QSettings()
        s.remove("APIS/config_ini")
        self.uiConfigIniFileEdit.clear()